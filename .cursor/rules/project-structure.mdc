---
title: Project Structure Guide
---

# Project Structure Guide

This is a full-stack application with Next.js frontend and FastAPI backend, connected to MongoDB.

## Backend Structure
- **Main entry**: [main.py](mdc:backend/main.py) - FastAPI application with routers and middleware
- **Authentication**: [backend/auth/](mdc:backend/auth/) - JWT auth, CSRF protection, user management
- **Models**: [backend/models/](mdc:backend/models/) - Pydantic models for data validation
- **Database**: [database.py](mdc:backend/database.py) - MongoDB connection setup
- **Utils**: [backend/utils/](mdc:backend/utils/) - Utility functions for business logic

## Frontend Structure
- **Main entry**: [frontend/src/app/](mdc:frontend/src/app/) - Next.js App Router structure
- **Configuration**: [frontend/src/config/env.ts](mdc:frontend/src/config/env.ts) - Environment variables and constants
- **Services**: [frontend/src/utils/](mdc:frontend/src/utils/) - API service classes
- **Layout**: [frontend/src/app/foursyz/layout.tsx](mdc:frontend/src/app/foursyz/layout.tsx) - Authentication and authorization logic

## Key Collections
- `users_4syz` - User management with roles (admin, ceo, DC_tracker_manager)
- `client_details` - Client information for delivery challans
- `deliveryChallan_tracker` - Delivery challan records with auto-generated numbers

## Authentication Flow
1. Login via [frontend/src/app/foursyz/login/page.tsx](mdc:frontend/src/app/foursyz/login/page.tsx)
2. JWT tokens stored in localStorage
3. Role-based access control in [frontend/src/app/foursyz/layout.tsx](mdc:frontend/src/app/foursyz/layout.tsx)
4. CSRF protection for state-changing operations
