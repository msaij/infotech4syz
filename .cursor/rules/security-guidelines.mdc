# Security Guidelines

## Authentication
- **JWT Implementation**: Use access tokens (short-lived) and refresh tokens (long-lived)
- **Token Storage**: Store tokens in localStorage with proper key naming
- **Token Validation**: Validate tokens on every protected route access
- **Token Refresh**: Implement automatic token refresh when access token expires
- **Token Blacklisting**: Blacklist tokens on logout for immediate invalidation

## Authorization
- **Role-Based Access**: Implement CEO designation check for client management
- **Route Protection**: Use layout-level protection for frontend routes
- **API Protection**: Use FastAPI dependencies for backend endpoint protection
- **Early Returns**: Prevent unauthorized content rendering with early returns

## Data Protection
- **Password Hashing**: Use bcrypt with pepper for password storage
- **Legacy Support**: Maintain SHA-256 compatibility for existing users
- **CSRF Protection**: Use one-time CSRF tokens for state-changing operations
- **Input Validation**: Validate all user inputs with Pydantic models

## Environment Configuration
- **Sensitive Data**: Never hardcode URLs, secrets, or sensitive configuration
- **Environment Variables**: Use `.env` files for configuration management
- **Client-Side Config**: Use `NEXT_PUBLIC_` prefix for frontend environment variables
- **Backend Config**: Keep sensitive data server-side only

## API Security
- **CORS Configuration**: Configure CORS properly for cross-origin requests
- **Rate Limiting**: Implement rate limiting for authentication endpoints
- **Input Sanitization**: Sanitize and validate all API inputs
- **Error Handling**: Don't expose sensitive information in error messages

## Frontend Security
- **XSS Prevention**: Use proper React practices to prevent XSS attacks
- **CSRF Tokens**: Include CSRF tokens in modification requests
- **Secure Storage**: Use secure storage methods for sensitive data
- **Content Security**: Implement proper content security policies
description:
globs:
alwaysApply: true
---
