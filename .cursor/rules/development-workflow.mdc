# Development Workflow

## Project Setup
- **Frontend**: Next.js with TypeScript, Tailwind CSS
- **Backend**: FastAPI with Python, MongoDB
- **Authentication**: JWT with access/refresh tokens
- **Authorization**: Role-based access control (CEO designation)

## Development Process
1. **Environment Setup**: Configure `.env` files for both frontend and backend
2. **Database Setup**: Ensure MongoDB is running and accessible
3. **Dependencies**: Install all required packages for both frontend and backend
4. **Development Servers**: Run both frontend (port 3000) and backend (port 8000)

## Code Organization
- **Frontend**: Follow Next.js App Router structure
- **Backend**: Use modular structure with separate auth and business logic
- **Models**: Use Pydantic for data validation and serialization
- **Services**: Implement service classes for API integration

## Testing Strategy
- **Frontend**: Test authentication flow and role-based access
- **Backend**: Test API endpoints and database operations
- **Integration**: Test full-stack functionality
- **Security**: Test authentication, authorization, and CSRF protection

## Deployment Considerations
- **Environment Variables**: Ensure all environment variables are properly configured
- **Database**: Set up production MongoDB instance
- **CORS**: Configure CORS for production domains
- **Security**: Implement proper security headers and policies

## Common Tasks
- **User Management**: Create, update, and manage users
- **Client Management**: Create, update, and delete clients (CEO only)
- **Authentication**: Login, logout, and token management
- **Authorization**: Role-based access control implementation

## Troubleshooting
- **Token Issues**: Check token expiration and refresh logic
- **Database Issues**: Verify MongoDB connection and collection access
- **CORS Issues**: Ensure proper CORS configuration
- **Authentication Issues**: Verify user credentials and domain validation
description:
globs:
alwaysApply: true
---
